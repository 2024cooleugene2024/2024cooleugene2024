# Библиотека requests
#  — это одна из самых популярных библиотек Python для работы с HTTP-запросами.
# Она делает взаимодействие с веб-сервисами простым, интуитивно понятным и эффективным.
# С её помощью можно отправлять GET, POST, PUT, DELETE и другие типы запросов, а также обрабатывать ответы сервера.
# Основные возможности:
# Отправка запросов:
# GET: для получения данных.
# POST: для отправки данных.
# PUT/DELETE: для обновления или удаления данных.
# Обработка ответов:
# Доступ к статусу ответа, заголовкам, содержимому и т.д.
# Работа с JSON:
# Удобное преобразование данных в JSON и обратно.
# Сессии и cookies:
# Удобная работа с пользовательскими сессиями.
# Настройка заголовков и параметров:
# Возможность задавать заголовки, параметры строки запроса и тело запроса.

# Пример использования:
# # 1. Отправка GET-запроса:

import requests

url = "https://jsonplaceholder.typicode.com/todos/1"  # Пример API
response = requests.get(url)

# Проверяем статус ответа
if response.status_code == 200:
    print("Данные успешно получены:")
    print(response.json())  # Преобразуем данные в формат JSON
else:
    print(f"Ошибка: {response.status_code}")

# 2. Отправка POST-запроса:

data = {
    "title": "Buy groceries",
    "completed": False,
    "userId": 1
}
response = requests.post("https://jsonplaceholder.typicode.com/todos", json=data)

# Обрабатываем ответ
if response.status_code == 201:  # Код 201 — ресурс создан
    print("Ресурс успешно создан:")
    print(response.json())
else:
    print(f"Ошибка: {response.status_code}")

# 3. Установка заголовков:

headers = {"Authorization": "Bearer YOUR_TOKEN"}
response = requests.get("https://jsonplaceholder.typicode.com/todos", headers=headers)

print(f"Статус ответа: {response.status_code}")

# Почему использовать requests?
# Упрощает взаимодействие с API и веб-сервисами.
# Поддерживает широкий набор функций для работы с HTTP.
# Обеспечивает читаемый код и легкость интеграции.

# Библиотека pandas
# pandas — это мощная библиотека Python для анализа и обработки данных.
# Она предоставляет высокоуровневые структуры данных и функции для удобной работы с табличными данными,
# что делает её незаменимой для работы с большими и сложными наборами данных.

# Основные возможности:
# Структуры данных:
# Series: одномерный массив, аналогичный списку или столбцу таблицы.
# DataFrame: двумерная структура данных (таблица) с метками строк и столбцов.
# Загрузка и сохранение данных:
# Поддержка форматов CSV, Excel, SQL, JSON и др.
# Фильтрация и манипуляция данными:
# Фильтрация строк и столбцов, сортировка, объединение данных.
# Анализ данных:
# Операции агрегации, группировки и статистического анализа.
# Работа с отсутствующими значениями:
# Обнаружение, замена и удаление пропусков.
# Интеграция с визуализацией:
# Поддержка встроенных графиков.

# Пример использования:
# 1. Создание и анализ таблицы (DataFrame):

import pandas as pd

# Создаем DataFrame
data = {
    "Name": ["Alice", "Bob", "Charlie", "David"],
    "Age": [24, 27, 22, 32],
    "Score": [85, 89, 78, 91]
}
df = pd.DataFrame(data)

# Просмотр данных
print("Таблица данных:")
print(df)

# Простой анализ
print("\nСредний возраст:", df["Age"].mean())
print("Максимальный балл:", df["Score"].max())

# Почему использовать pandas?
# Легко работать с табличными данными.
# Интуитивный синтаксис для сложных операций.
# Подходит как для небольших наборов данных, так и для работы с большими массивами.

# Библиотека numpy
# numpy (Numerical Python) — библиотека Python, предназначенная для работы с многомерными массивами и матрицами.
# Она предоставляет удобные инструменты для выполнения математических операций,
# обработки больших массивов данных и линейной алгебры.

# Основные возможности:
# Массивы ndarray:
# Основная структура данных, позволяющая эффективно работать с многомерными массивами.
# Математические операции:
# Быстрые вычисления, включая арифметику, тригонометрию, статистику и др.
# Линейная алгебра:
# Операции с матрицами, такие как умножение, транспонирование, вычисление определителя и т. д.
# Работа с массивами:
# Создание массивов, их индексация, трансформация и фильтрация.
# Интеграция с другими библиотеками:
# Часто используется в связке с pandas, matplotlib, scipy и другими.

# Пример использования:
# 1. Создание массива:

import numpy as np

# Создаем массив из списка
array = np.array([1, 2, 3, 4, 5])
print("Одномерный массив:", array)

# Создаем двумерный массив (матрицу)
matrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("\nДвумерный массив:")
print(matrix)

# 2. Математические операции:

# Создаем массив
array = np.array([1, 2, 3, 4, 5])

# Выполняем операции
squared = np.square(array)  # Возведение в квадрат
mean = np.mean(array)  # Среднее значение
sum_value = np.sum(array)  # Сумма элементов

print("\nМатематические операции:")
print(f"Массив в квадрате: {squared}")
print(f"Среднее значение: {mean}")
print(f"Сумма элементов: {sum_value}")

# 3. Генерация чисел:

# Генерация массива чисел от 0 до 10 с шагом 2
array = np.arange(0, 11, 2)
print("\nСгенерированный массив:", array)

# Генерация массива случайных чисел
random_array = np.random.rand(5)
print("Случайный массив:", random_array)

# 4. Работа с матрицами:

# Создаем две матрицы
matrix1 = np.array([[1, 2], [3, 4]])
matrix2 = np.array([[5, 6], [7, 8]])

# Умножение матриц
result = np.dot(matrix1, matrix2)
print("\nРезультат умножения матриц:")
print(result)

# Почему использовать numpy?
# Скорость: операции с массивами в numpy значительно быстрее, чем с обычными списками Python.
# Удобство: мощные функции для работы с многомерными данными.
# Универсальность: подходит для научных вычислений, обработки данных, машинного обучения и визуализации.

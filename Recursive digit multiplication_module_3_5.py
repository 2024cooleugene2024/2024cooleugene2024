def get_multiplied_digits(number):
    # Преобразуем число в строку, чтобы можно было работать с каждой цифрой
    str_number = str(number)

    # Берем первую цифру в числовом представлении
    first = int(str_number[0])

    # Если длина строки больше 1, продолжаем рекурсию
    if len(str_number) > 1:
        return first * get_multiplied_digits(int(str_number[1:]))
    else:
        # Если осталась только одна цифра, возвращаем её
        return first


# Пример использования
result = get_multiplied_digits(40203)
print(result)  # Вывод: 24


# Логика рекурсивной функции get_multiplied_digits основана на разбиении проблемы на более мелкие подзадачи.
# Вот пошаговое объяснение кода:
# Функция get_multiplied_digits принимает на вход целое число.
# Функция преобразует число в строку str_number, чтобы иметь возможность индивидуального доступа к каждой цифре.
# Сначала извлекается и сохраняется в переменной первая цифра числа.
# Это делается путем преобразования первого символа str_number в целое число.
# Функция проверяет, превышает ли длина str_number 1. Если да, значит, в номере больше цифр.
# В этом случае функция возвращает произведение first и результат рекурсивного вызова самой себя с числом,
# образованным удалением первой цифры (str_number[1:]).
# Это делается путем преобразования нарезанной строки обратно в целое число.
# Если длина str_number не больше 1, это означает, что в номере осталась только одна цифра.
# В этом случае функция возвращает саму одну цифру (первую).
# Затем функция используется в основной части кода для вычисления произведения цифр числа 40203.
# Результат сохраняется в переменной result и выводится на консоль.
## Отступы кода сохраняются, чтобы четко показать структуру рекурсивной функции.
# Функция вызывается рекурсивно до тех пор,
# пока не будет достигнут базовый случай (когда длина str_number не превышает 1).